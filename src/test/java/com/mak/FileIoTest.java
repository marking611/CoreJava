package com.mak;

import org.junit.Test;

import java.io.*;

/**
 * Created by makai on 2017/10/12.
 */
public class FileIoTest {
    private String 十to十六(int i) {
        return Integer.toHexString(i);
    }

    private int 十六to十(String s) {
        return Integer.parseInt(s, 16);
    }

    private byte[] fileToByte(String filepath) throws Exception {
        FileInputStream fs = new FileInputStream(filepath);
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        int ch;
        while ((ch = fs.read()) != -1) {
            byteArrayOutputStream.write(ch);
        }
        byte[] data = byteArrayOutputStream.toByteArray();
        byteArrayOutputStream.close();
        return data;
    }

    public String byteTo十六(byte[] data) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < data.length; i++) {
            sb.append(Integer.toHexString(data[i]));
        }
        return sb.toString();
    }

    private byte[] 十六toByte(String hexString) {
        hexString = hexString.toLowerCase();
        final byte[] byteArray = new byte[hexString.length() / 2];
        int k = 0;
        for (int i = 0; i < byteArray.length; i++) {//因为是16进制，最多只会占用4位，转换成字节需要两个16进制的字符，高位在先
            byte high = (byte) (Character.digit(hexString.charAt(k), 16) & 0xff);
            byte low = (byte) (Character.digit(hexString.charAt(k + 1), 16) & 0xff);
            byteArray[i] = (byte) (high << 4 | low);
            k += 2;
        }
        return byteArray;
    }


    public void toFile(byte[] data, String filename) {
        File file = new File(filename);
        if (!file.getParentFile().exists()) {
            file.getParentFile().mkdirs();
        }
        try {
            FileOutputStream fileOutputStream = new FileOutputStream(file);
            fileOutputStream.write(data);
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    @Test
    public void test() {
        String s = "0x
        toFile(十六toByte(s), "K:\\cf\\a.zip");
    }
}
